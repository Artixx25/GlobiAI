import React, { useState, useEffect } from "react";
import { Card, FormField, Loader } from "../components";
import { search } from "../assets";
import { setPosts } from "../state";
import { useDispatch, useSelector } from "react-redux";
import { motion } from "framer-motion";
import { staggerContainer } from "../utils/motion";

const RenderCards = ({ data, title }) => {
  if (data?.length > 0)
    return data.map((post, index) => (
      <Card key={post._id} {...post} index={index} />
    ));

  return (
    <h2 className="mt-5 font-bold text-[#53a717] text-xl uppercase">{title}</h2>
  );
};

const Posts = () => {
  const [loading, setLoading] = useState(false);
  const [searchText, setSearchText] = useState("");
  const [allPosts, setAllPosts] = useState(null);
  const [searchedResults, setSearchedResults] = useState(null);
  const [searchTimeOut, SetSearchTimeOut] = useState(null);

  const dispatch = useDispatch();

  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true);

      try {
        const response = await fetch("http://localhost:8080/api/v1/post", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });

        if (response.ok) {
          const result = await response.json();
          setAllPosts(result.data);
          dispatch(setPosts({ posts: result.data.reverse() }));
        }
      } catch (e) {
        alert(e);
      } finally {
        setLoading(false);
      }
    };

    fetchPosts();
  }, []);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeOut);
    setSearchText(e.target.value);

    SetSearchTimeOut(
      setTimeout(() => {
        const searchResults = posts.filter(
          (item) =>
            item.username.toLowerCase().includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        setSearchedResults(searchResults);
      }, 500)
    );
  };
  const posts = useSelector((state) => state.posts);

  return (
    <motion.section initial={{opacity:0,display: 'none'}} animate={{opacity:1,display: 'block'}} exit={{opacity: 0, transition: {duration:1},display: 'none'}} className="max-w-7xl mx-auto relative top-20">
      <div>
        <h1 className="font-extrabold text-[#e9ffe9] text-[32px] z-[5] text-center">
          The Community Showcase
        </h1>
        <p className="mt-2 text-[#e7e7e7] text-[16px] max-w-[500px] z-[5] text-center mx-auto">
          Browse through a collection of imaginative and visually stunning
          images generated by DALL-E AI
        </p>
      </div>

      <div className="mt-16 z-[5] relative">
        <FormField
          labelName="Search Posts"
          type="text"
          name="text"
          placeholder="Search some interesting posts"
          value={searchText}
          handleChange={handleSearchChange}
        />
        <img
          src={search}
          alt=""
          className="w-6 h-6 invert absolute top-[38px] right-4 opacity-70"
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-[#666e75] text-xl mb-3">
                Showing results for{" "}
                <span className="text-[#eef0f9]">{searchText}</span>
              </h2>
            )}
            {searchText ? (
              <div
                className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3"
              >
                <RenderCards
                  data={searchedResults}
                  title="No search results found"
                />
              </div>
            ) : (
              <motion.div
                variants={staggerContainer}
                initial="hidden"
                whileInView="show"
                viewport={{ once: false, amount: 0.15 }}
                className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3"
              >
                <RenderCards
                  data={posts !== null ? posts : allPosts}
                  title="No posts found"
                />
              </motion.div>
            )}
          </>
        )}
      </div>
      <div className="circle"></div>
    </motion.section>
  );
};

export default Posts;
